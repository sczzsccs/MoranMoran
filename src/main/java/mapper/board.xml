<?xml version="1.0" encoding="UTF-8"?>	<!DOCTYPE mapper
	  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.moran.board">

	<!-- 내가 쓴 글 전체보기 파라미터는 mId -->
	<select id="SelectAllBoardBymId" parameterType="int" resultType="hashmap">
		SELECT 
			m.m_nick as nick,
			b.b_id AS bId ,
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img as biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON bi.b_id = b.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.m_id= #{mId} AND b.b_is_maintain = 0
	</select>

	<!-- 글에 댓글이 몇개 있는지 구하기 -->
	<select id="SelectCountAllComment" resultType="hashmap">
		SELECT
			c.b_id as bId,
			COUNT(*) as count
		FROM COMMENT c
		JOIN BOARD b ON c.b_id = b.b_id
		GROUP BY c.b_id
	</select>
	
	<!-- 특정 게시글 댓글 몇개 있는지 구하기 -->
	<select id="SelectCountAllCommentBybId" parameterType="int" resultType="hashmap">
		SELECT
			c.b_id as bId,
			COUNT(*) as count
		FROM COMMENT c
		JOIN BOARD b ON c.b_id = b.b_id
		GROUP BY c.b_id
		WHERE b.b_id = #{bId}
	</select>

	<!-- 노하우 게시글 총 갯수 -->
	<select id="SelectTotalCountKH" resultType="int">
    	SELECT COUNT(*)
    	FROM BOARD
    	WHERE b_type = 2 AND b_is_maintain = 0
	</select>

	<!-- 노하우 전체보기(최신순) BoardVO 정보와 MemberVO의 닉네임 조인 -->
	<select id="SelectAllKH" resultType="hashmap">
		SELECT 
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img as biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON bi.b_id = b.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.b_type = 2 AND b.b_is_maintain = 0
		ORDER BY b.b_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- 노하우 전체보기(인기순) BoardVO 정보와 MemberVO의 닉네임 조인 -->	
	<select id="SelectAllKHOrderByViewCntDesc" resultType="hashmap">
		SELECT 
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img as biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON bi.b_id = b.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.b_type = 2 AND b.b_is_maintain = 0
		ORDER BY b.b_like_cnt DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- QnA 게시글 총 갯수 -->
	<select id="SelectTotalCountQnA" resultType="int">
    	SELECT COUNT(*)
    	FROM BOARD
    	WHERE b_type = 1 AND b_is_maintain = 0
	</select>
	
	<!-- QnA 전체보기(최신순) BoardVO 정보와 MemberVO의 닉네임 조인 -->
	<select id="SelectAllQnA" parameterType="hashmap" resultType="hashmap">
		SELECT 
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img as biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON bi.b_id = b.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.b_type = 1 AND b.b_is_maintain = 0
		ORDER BY b.b_id DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- QnA 전체보기(인기순) BoardVO 정보와 MemberVO의 닉네임 조인 -->
	<select id="SelectAllQnAOrderByViewCntDesc" resultType="hashmap">
		SELECT 
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img as biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON bi.b_id = b.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.b_type = 1 AND b.b_is_maintain = 0
		ORDER BY b.b_view_cnt DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<!-- 글 디테일 -->	
	<select id="SelectBoardBybId" parameterType="int" resultType="hashmap">
		SELECT 
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod,
			bi.bi_img AS biImg
		FROM BOARD b
		LEFT JOIN BOARD_IMG bi ON b.b_id = bi.b_id
		JOIN MEMBER m ON b.m_id = m.m_id
		WHERE b.b_id = #{bId}
	</select>
	
	<!-- QnA 글 작성 -->	
	<insert id="InsertQnA" parameterType="kr.co.moran.web.vo.BoardVO" useGeneratedKeys="true" keyProperty="bId">
		INSERT INTO BOARD(m_id, b_title, b_contents, b_regdate, b_view_cnt, b_like_cnt, b_type, b_is_maintain) 
		VALUES (#{mId}, #{title}, #{contents}, NOW(), 0, 0, 1, 0)
	</insert>
	
	<!-- 노하우 글 작성 -->
	<insert id="InsertKH" parameterType="kr.co.moran.web.vo.BoardVO" useGeneratedKeys="true" keyProperty="bId">
		INSERT INTO BOARD(m_id, b_title, b_contents, b_regdate, b_view_cnt, b_like_cnt, b_type, b_is_maintain) 
		VALUES (#{mId}, #{title}, #{contents}, NOW(), 0, 0, 2, 0)
	</insert>
	
	<!-- 글 수정 -->
	<update id="ModifyBoardBybId">
		UPDATE BOARD
		SET b_title = #{title},
			b_contents = #{contents}
		WHERE b_id = #{bId}
	</update>
	
	<!-- 글 삭제 -->
	<update id="DeleteBoardBybId">
		UPDATE BOARD
		SET b_is_maintain = 1, b_retention_period = ADDDATE(date(now()),INTERVAL 6 YEAR)
		WHERE b_id = ${bId}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="ModifyBoardViewCntBybId" parameterType="int">
		UPDATE BOARD
		SET b_view_cnt = b_view_cnt + 1
		WHERE b_id = ${bId}
	</update>
	
	<!-- 좋아요 수 증가 -->
	<update id="ModifyBoardLikeCntPlusBybId" parameterType="int">
		UPDATE BOARD
		SET b_like_cnt = b_like_cnt + 1
		WHERE b_id = ${bId}
	</update>
	
	<!-- 좋아요 수 감소 -->
	<update id="ModifyBoardLikeCntMinusBybId" parameterType="int">
		UPDATE BOARD
		SET b_like_cnt = b_like_cnt - 1
		WHERE b_id = ${bId}
	</update>
	
	<!-- 좋아요 버튼 누를 때 테이블 값 추가 b_id나 c_id와 물려야됨 내가 좋아요 누른 글 보기는 조인 두번 해야 함-->
	
	<!-- 게시글 좋아요 추가-->
	<insert id="InsertBoardLikeBybId" parameterType="kr.co.moran.web.vo.LikeVO">
		INSERT INTO LIKES(m_id, b_id, l_date)
		VALUES(#{mId}, #{bId}, NOW())
	</insert>
	
	<!-- 게시글 좋아요 삭제 -->
	<delete id="DeleteBoardLikeBybId" parameterType="kr.co.moran.web.vo.LikeVO">
		DELETE FROM LIKES
		WHERE b_id = #{bId} AND m_id = #{mId}
	</delete>	
	
	<!-- 댓글 좋아요 -->
	<insert id="InsertCommentLikeBybId" parameterType="kr.co.moran.web.vo.LikeVO">
		INSERT INTO LIKES(m_id, c_id, l_date)
		VALUES(#{mId}, #{bId}, NOW())
	</insert>
	
	<!-- 게시글 좋아요 여부 -->
	<select id="SelectBoardLikeBybIdandmId" parameterType="kr.co.moran.web.vo.LikeVO" resultType="kr.co.moran.web.vo.LikeVO">
		SELECT 
			b_id as bId,
			m_id as mId 
		FROM LIKES
		WHERE b_id = #{bId} AND m_id = #{mId}
	</select>	
	
	<!-- 좋아요한 게시글 보기 -->
	<select id="SelectBoardLikeBymId" parameterType="int" resultType="hashmap">
		SELECT 			
			m.m_nick AS nick, 
			b.b_id AS bId , 
			b.m_id AS mId , 
			b.b_title AS title, 
			b.b_contents AS contents, 
			b.b_regdate AS regDate, 
			b.b_view_cnt AS viewCnt , 
			b.b_like_cnt AS likeCnt , 
			b.b_type AS type , 
			b.b_is_maintain AS isMaintain, 
			b.b_retention_period AS retentionPeriod 
		FROM LIKES l
		JOIN BOARD b ON l.b_id = b.b_id
		JOIN MEMBER m ON l.m_id = m.m_id
		WHERE m.m_id = #{mId}
	</select>
	
	<!-- 게시글 작성 시 이미지 입력 -->
	<insert id="InsertBoardImg" parameterType="kr.co.moran.web.vo.BoardImgVO" >
		INSERT INTO BOARD_IMG(b_id, bi_img)
		VALUES
		(#{bId}, #{biImg})
	</insert>
	
</mapper>
